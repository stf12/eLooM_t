/**
 ******************************************************************************
 * @file    mx.h
 * @author  STMicroelectronics - AIS - MCD Team
 * @version 1.0.0
 * @date    Jul 3, 2020
 *
 * @brief Project peripherals configuration files.
 *
 * This files declares the peripherals configuration parameters that can be used
 * in the Low Level API of an eLooM driver - IDrvInit(). It creates a link
 * between the initialization code generated by CubeMX (see the .ioc file
 * in the tools folder) and the eLooM framework.
 *
 * This example show how a managed task allocates an SPI driver that must be
 * connected to the SPI3 (that has been configured using CubeMX):
 * ~~~{.c}
 * p_task->p_driver = SPIMasterDriverAlloc();
 * if (p_task->p_driver != NULL)
 * {
 *   res = IDrvInit((IDriver*)p_task->p_driver, (void*)&MX_SPI3InitParams);
 *   if (SYS_IS_ERROR_CODE(res)) {
 *     SYS_DEBUGF(SYS_DBG_LEVEL_SEVERE, ("SPIBus task: error during driver initialization\r\n"));
 *   }
 * }
 * ~~~
 *
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2021 STMicroelectronics
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  ******************************************************************************
  */
#ifndef INCLUDE_MX_MX_H_
#define INCLUDE_MX_MX_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32l5xx_hal.h"

/* Private defines -----------------------------------------------------------*/
#define LCD_BL_PWM_Pin GPIO_PIN_1
#define LCD_BL_PWM_GPIO_Port GPIOE
#define LED_GREEN_Pin GPIO_PIN_12
#define LED_GREEN_GPIO_Port GPIOG
#define USER_BUTTON_Pin GPIO_PIN_13
#define USER_BUTTON_GPIO_Port GPIOC
#define LED_RED_Pin GPIO_PIN_3
#define LED_RED_GPIO_Port GPIOD
#define GYRO_ACC_INT_Pin GPIO_PIN_3
#define GYRO_ACC_INT_GPIO_Port GPIOF
#define UCPD_DBn_Pin GPIO_PIN_5
#define UCPD_DBn_GPIO_Port GPIOB
#define USART1_TX_Pin GPIO_PIN_9
#define USART1_TX_GPIO_Port GPIOA
#define USART1_RX_Pin GPIO_PIN_10
#define USART1_RX_GPIO_Port GPIOA
#define LCD_TE_Pin GPIO_PIN_8
#define LCD_TE_GPIO_Port GPIOA
#define SDIO_DETECT_Pin GPIO_PIN_2
#define SDIO_DETECT_GPIO_Port GPIOF
#define CTP_INT_Pin GPIO_PIN_1
#define CTP_INT_GPIO_Port GPIOF
#define LCD_PWR_ON_Pin GPIO_PIN_0
#define LCD_PWR_ON_GPIO_Port GPIOH
#define BLE_INT_Pin GPIO_PIN_6
#define BLE_INT_GPIO_Port GPIOG
#define BLE_RSTN_Pin GPIO_PIN_8
#define BLE_RSTN_GPIO_Port GPIOG
#define BLE_CSN_Pin GPIO_PIN_5
#define BLE_CSN_GPIO_Port GPIOG
#define LCD_RST_Pin GPIO_PIN_14
#define LCD_RST_GPIO_Port GPIOF
#define STMOD_SEL_12_Pin GPIO_PIN_11
#define STMOD_SEL_12_GPIO_Port GPIOF
#define AUDIO_RESETN_Pin GPIO_PIN_1
#define AUDIO_RESETN_GPIO_Port GPIOG
#define UCPD_FLT_Pin GPIO_PIN_14
#define UCPD_FLT_GPIO_Port GPIOB
#define VBUS_SENSE_Pin GPIO_PIN_4
#define VBUS_SENSE_GPIO_Port GPIOA
#define STMOD_SEL_34_Pin GPIO_PIN_12
#define STMOD_SEL_34_GPIO_Port GPIOF
#define CTP_RST_Pin GPIO_PIN_15
#define CTP_RST_GPIO_Port GPIOF
/* USER CODE BEGIN Private defines */
#define SYS_DBG_TP1_GPIO_Port                   GPIOG
#define SYS_DBG_TP1_Pin                         GPIO_PIN_12
#define SYS_DBG_TP2_GPIO_Port                   GPIOD
#define SYS_DBG_TP2_Pin                         GPIO_PIN_3
/* USER CODE END Private defines */


/* Driver initialization parameters */
/************************************/

/**
 * SPI configuration parameters.
 */
typedef struct _MX_SPIParams_t
{
  SPI_HandleTypeDef *p_spi_handle; /*!< HAL SPI handle */
  IRQn_Type spi_dma_rx_irq_n; /*!< DMA channel rx interrupt number. */
  IRQn_Type spi_dma_tx_irq_n; /*!< DMA channel tx interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX SPI initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_SPIParams_t;

/**
 * I2C configuration parameters.
 */
typedef struct _MX_I2CParams_t
{
  I2C_HandleTypeDef *p_i2c_handle; /*!< HAL I2C handle */
  IRQn_Type i2c_ev_irq_n; /*!< I2C EV interrupt number. */
  IRQn_Type i2c_er_irq_n; /*!< I2C ER interrupt number. */
  IRQn_Type i2c_dma_rx_irq_n; /*!< DMA channel rx interrupt number. */
  IRQn_Type i2c_dma_tx_irq_n; /*!< DMA channel tx interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX I2C initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_I2CParams_t;

/**
 * DFSDM configuration parameters.
 */
typedef struct _MX_DFSDMParams_t
{
  DFSDM_Channel_HandleTypeDef *p_dfsdm_channel; /*!< HAL DFSDM handle */
  DFSDM_Filter_HandleTypeDef *p_dfsdm_filter; /*!< HAL DFSDM filter handle */
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX DFSDM initialization function */
  void (*p_mx_dma_init_f)(void); /*!< MX DMA initialization function */
} MX_DFSDMParams_t;

/**
 * ADC configuration parameters.
 */
typedef struct _MX_ADCParams_t
{
  ADC_HandleTypeDef *p_adc; /*!< HAL ADC handle */
  void (*p_mx_init_f)(void); /*!< MX ADC initialization function */
} MX_ADCParams_t;

/**
 * TIM configuration parameters.
 */
typedef struct _MX_TIMParams_t
{
  TIM_HandleTypeDef *p_tim; /*!< HAL TIM handle */
  IRQn_Type irq_n; /*!< External interrupt number. */
  void (*p_mx_init_f)(void); /*!< MX TIM initialization function */
} MX_TIMParams_t;

/**
 * GPIO Configuration parameters.
 */
typedef struct _MX_GPIOParams_t
{
  void (*p_mx_init_f)(void); /*!< MX GPIO initialization function */
  IRQn_Type irq_n; /*!< External interrupt number. */
  uint32_t pin;
  GPIO_TypeDef *port;
} MX_GPIOParams_t;

/**
 * SPI2 configuration parameters.
 */
extern const MX_SPIParams_t MX_SPI2InitParams;

/**
 * SPI3 configuration parameters.
 */
extern const MX_SPIParams_t MX_SPI3InitParams;

/**
 * I2C2 configuration parameters.
 */
extern const MX_I2CParams_t MX_I2C2InitParams;

/**
 * DFSDM CH0 F1 configuration parameters.
 */
extern const MX_DFSDMParams_t MX_DFSDMCH0F1InitParams;

/**
 * ADC1 configuration parameters.
 */
extern const MX_ADCParams_t MX_ADC1InitParams;

/**
 * TIM5 configuration parameters.
 */
extern const MX_TIMParams_t MX_TIM5InitParams;

/**
 * TIM16 configuration parameters.
 */
extern const MX_TIMParams_t MX_TIM16InitParams;

/**
 * PF6 (STBC02_SW_SEL) configuration parameters.
 */
extern const MX_GPIOParams_t MX_GPIO_PF6InitParams;


#ifdef __cplusplus
}
#endif

#endif /* INCLUDE_MX_MX_H_ */
